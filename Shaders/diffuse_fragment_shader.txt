#version 330

// Phong fragment shader
// specify uniform variables shared with fragment shader

uniform vec4        lposition[3];
uniform vec4        lambient[3];
uniform vec4        ldiffuse[3];
uniform vec3        lattenuation[3]; // x=constant, y=linear, z=quadratic (x<0 means light is not active)

uniform vec4 matAmbient;
uniform vec4 matDiffuse;
uniform vec4 matSpecular;

// input packet
in packet {
    vec3    normal; 
    vec3    lightDir[3]; 
    vec3    eyeDir; 
    vec2    textureCoord;
} inputFragment;


// output packet
layout (location = 0) out vec4 fragmentColour;

uniform sampler2D texture1;

void main(void) {
    
    vec4 final_color;

    for (int i = 0; i < 3; i++) 
    {
        vec4 texColour= vec4(texture2D(texture1, inputFragment.textureCoord).xyz,1);

        float d = length(inputFragment.lightDir[i]);
        float a = 1.0 / (lattenuation[i].x + lattenuation[i].y*d + lattenuation[i].z*d*d);
        final_color += lambient[i] * matAmbient*texColour;
        vec3 N = normalize(inputFragment.normal);
        vec3 L = normalize(inputFragment.lightDir[i]);
        vec3 E = normalize(inputFragment.eyeDir);
    
        float lambertTerm = dot(N, L);
        final_color += a * ldiffuse[i] * matDiffuse * lambertTerm*texColour;

        //spec
        vec3 R=reflect(L,N);
        final_color += vec4(matSpecular.xyz*max(pow(dot(-E,R),matSpecular.w),0),matDiffuse.a);
    }

    fragmentColour = final_color;

}